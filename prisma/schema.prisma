// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    currentRoom   String?       @default("login")
    belonging     String?       @default("")
    progress      Int?          @default(0)
    movableRooms  MovableRoom[]
    belongings    Belonging[]
    isGetItems    IsGetItems?
    elevator      Elevator?
    entrance      Entrance?
    bathroom      Bathroom?
    cafeteria     Cafeteria?
    kitchen       Kitchen?
    socialRoom    SocialRoom?
    storeRoom     StoreRoom?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model MovableRoom {
    roomId   Int    @id @default(autoincrement())
    userId   String
    roomName String
    user     User   @relation(fields: [userId], references: [id])
}

model Belonging {
    belongingId   Int    @id @default(autoincrement())
    userId        String
    belongingName String
    user          User   @relation(fields: [userId], references: [id])
}

model IsGetItems {
    isGetItemId   Int     @id @default(autoincrement())
    userId        String  @unique
    scrollBar     Boolean @default(false)
    woodenBoard   Boolean @default(false)
    stone         Boolean @default(false)
    branchAndRope Boolean @default(false)
    user          User    @relation(fields: [userId], references: [id])
}

model Elevator {
    elevatorId     Int     @id @default(autoincrement())
    userId         String  @unique
    eventIndex     Int     @default(0)
    event0Finished Boolean @default(false)
    user           User    @relation(fields: [userId], references: [id])
}

model Entrance {
    entranceId     Int     @id @default(autoincrement())
    userId         String  @unique
    isFitScrollbar Boolean @default(false)
    eventIndex     Int     @default(0)
    event0Finished Boolean @default(false)
    isFirstClear   Boolean @default(false)
    isClear        Boolean @default(false)
    user           User    @relation(fields: [userId], references: [id])
}

model Bathroom {
    bathroomId     Int     @id @default(autoincrement())
    userId         String  @unique
    eventIndex     Int     @default(0)
    event0Finished Boolean @default(true)
    user           User    @relation(fields: [userId], references: [id])
}

model Cafeteria {
    cafeteriaId    Int     @id @default(autoincrement())
    userId         String  @unique
    eventIndex     Int     @default(0)
    event0Finished Boolean @default(true)
    user           User    @relation(fields: [userId], references: [id])
}

model Kitchen {
    kitchenId      Int     @id @default(autoincrement())
    userId         String  @unique
    isClickRock    Boolean @default(false)
    eventIndex     Int     @default(0)
    event0Finished Boolean @default(true)
    isFirstClear   Boolean @default(false)
    isClear        Boolean @default(false)
    user           User    @relation(fields: [userId], references: [id])
}

model SocialRoom {
    socialRoomId   Int     @id @default(autoincrement())
    userId         String  @unique
    isLighting     Boolean @default(false)
    eventIndex     Int     @default(0)
    event0Finished Boolean @default(false)
    isFirstClear   Boolean @default(false)
    isClear        Boolean @default(false)
    user           User    @relation(fields: [userId], references: [id])
}

model StoreRoom {
    storeRoomId    Int     @id @default(autoincrement())
    userId         String  @unique
    eventIndex     Int     @default(0)
    event0Finished Boolean @default(true)
    user           User    @relation(fields: [userId], references: [id])
}
